// ! generated by AI for tests

use skia_safe::{surfaces, Canvas, Color, Paint, PaintStyle, Rect};
use std::sync::Arc;
use winit::{
    application::ApplicationHandler,
    dpi::PhysicalSize,
    event::WindowEvent,
    event_loop::{ActiveEventLoop, EventLoop},
    window::Window,
};

struct App {
    window: Option<Arc<Window>>,
}

impl ApplicationHandler for App
{
    fn resumed(&mut self, event_loop: &ActiveEventLoop)
    {
        #[allow(unused_variables)]
        let size = PhysicalSize::new(800, 600);
        
        // Criando a janela dentro de `resumed` usando `ActiveEventLoop`
        self.window = Some(Arc::new(event_loop.create_window(Default::default()).unwrap()));

        // Solicita um redraw para garantir que a janela seja renderizada
        if let Some(window) = &self.window
        {
            window.request_redraw();
        }
    }

    fn window_event(
        &mut self,
        event_loop: &ActiveEventLoop,
        _window_id: winit::window::WindowId,
        event: WindowEvent,
    ) {
        match event
        {
            WindowEvent::CloseRequested => event_loop.exit(),
            WindowEvent::RedrawRequested => {
                if let Some(window) = &self.window
                {
                    let mut surface = surfaces::raster_n32_premul((800, 600)).unwrap();
                    let canvas = surface.canvas();
                    draw_button(canvas);

                    // Atualiza a janela com o conteÃºdo do canvas
                    window.request_redraw();
                }
            }
            _ => {}
        }
    }
}

fn draw_button(canvas: &Canvas)
{
    let color = Color::from_argb(255, 52, 152, 219);
    let border_radius = 10.0;

    let mut paint = Paint::default();
    paint.set_color(color);
    paint.set_style(PaintStyle::Fill);

    let rect = Rect::from_xywh(50.0, 50.0, 200.0, 50.0);
    canvas.draw_round_rect(rect, border_radius, border_radius, &paint);
}

fn main()
{
    let event_loop = EventLoop::new().unwrap();
    
    event_loop.run_app(&mut App { window: None }).unwrap();
}